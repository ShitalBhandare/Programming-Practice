

Design Pattern:

Design patterns are typical solutions to commonly occurring problems in software design. 
They are like pre-made blueprints that you can customize to solve a recurring design problem in your code.


Classification of Design Patterns:

    Creational patterns provide object creation mechanisms that increase flexibility and reuse of existing code.

    Structural patterns explain how to assemble objects and classes into larger structures, while keeping the structures flexible and efficient.

    Behavioral patterns take care of effective communication and the assignment of responsibilities between objects.

Creational Patterns:

1) Singleton Patterns:
	 - Use the Singleton pattern when a class in your program should have just a single instance available to all clients; 
	 for example, a single database object shared by different parts of the program.
	 - The Singleton pattern disables all other means of creating objects of a class except for the special creation method. 
	 - This method either creates a new object or returns an existing one if it has already been created.
	 
2) Factory Method:
	- Factory Method is a creational design pattern that provides an interface for creating objects in a superclass, 
	but allows subclasses to alter the type of objects that will be created.
	- Use the Factory Method when you don’t know beforehand the exact types and dependencies of the objects your code should work 		with.
	e.g. Different transport ways like Road transport, Sea transport
	
3) Abstract Factory:
	- Abstract Factory is a creational design pattern that lets you produce families of related objects without specifying their 		concrete classes.
	- Use the Abstract Factory when your code needs to work with various families of related products, but you don’t want it to 		depend on the concrete classes of those products—they might be unknown beforehand or  you simply want to allow for future 		extensibility.
	- e.g. Chair, Table and Sofa with ancient, modern, victoria families

4) Builder Pattern:
	- Builder is a creational design pattern that lets you construct complex objects step by step. 
	- The pattern allows you to produce different types and representations of an object using the same construction code.
	e.g. House
	-Use the Builder pattern to get rid of a “telescopic constructor”.
	- Use the Builder pattern when you want your code to be able to create different representations of some product (for example, 		stone and wooden houses).
	- Use the Builder to construct Composite trees or other complex objects.
	
5) Prototype:
	- Prototype is a creational design pattern that lets you copy existing objects without making your code dependent on their 		classes.
	- An object that supports cloning is called a prototype.
	- Use the Prototype pattern when your code shouldn’t depend on the concrete classes of objects that you need to copy.
	

Structural pattern:

1) Adapter Pattern:
	- Adapter is a structural design pattern that allows objects with incompatible interfaces to collaborate.
	- Adapter:This is a special object that converts the interface of one object so that another object can understand it.
	- e.g XML to JSON converter
	- Use the Adapter class when you want to use some existing class, but its interface isn’t compatible with the rest of your code.
	
2) Bridge Pattern:
	- Bridge is a structural design pattern that lets you split a large class or a set of closely related classes into two 
	separate hierarchies—abstraction and implementation—which can be developed independently of each other.
	- Use the Bridge pattern when you want to divide and organize a monolithic class that has several variants of some functionality 
	(for example, if the class can work with various database servers).
	- e.g. shape class contains color class
	
3) Composite:
	- Composite is a structural design pattern that lets you compose objects into tree structures and then work with these 			structures as if they were individual objects.
	- Use the Composite pattern when you have to implement a tree-like object structure.
	- Use the pattern when you want the client code to treat both simple and complex elements uniformly.
	- e.g. amazon package may contain product / smaller package containing product and/or package
	
4) Decorator pattern:
	- Decorator is a structural design pattern that lets you attach new behaviors to objects by placing these objects inside special 	 wrapper objects that contain the behaviors.
	- Use the Decorator pattern when you need to be able to assign extra behaviors to objects at runtime without breaking the code 		that uses these objects.
	- e.g. SMS/Email/FB notification etc
	
5) Facade:
	- Facade is a structural design pattern that provides a simplified interface to a library, a framework, or any other complex set 	 of classes.
	- Use the Facade pattern when you need to have a limited but straightforward interface to a complex subsystem.
	
6) Flyweight:
	- Flyweight is a structural design pattern that lets you fit more objects into the available amount of RAM by sharing common 		parts of state between multiple objects instead of keeping all of the data in each object.
	- Use the Flyweight pattern only when your program must support a huge number of objects which barely fit into available RAM.
	- e.g Video game where lot of objects needs to be created in RAM
	
7) Proxy:
	- Proxy is a structural design pattern that lets you provide a substitute or placeholder for another object. A proxy controls 		access to the original object, allowing you to perform something either before or after the request gets through to the original 	 object.
	
	
Behavioral Pattern:

1) Chain of Responsibility:
	- Chain of Responsibility is a behavioral design pattern that lets you pass requests along a chain of handlers. Upon receiving a 	 request, each handler decides either to process the request or to pass it to the next handler in the chain.
	- Use the pattern when it’s essential to execute several handlers in a particular order.
	- e.g. various checks done during log in to any account

2) Command:
	- Command is a behavioral design pattern that turns a request into a stand-alone object that contains all information about the 	request. 
	- This transformation lets you parameterize methods with different requests, delay or queue a request’s execution, and support 		undoable operations.
	- Use the Command pattern when you want to queue operations, schedule their execution, or execute them remotely.
	
3) Iterator:
	- Iterator is a behavioral design pattern that lets you traverse elements of a collection without exposing its underlying 		representation (list, stack, tree, etc.).
	- Use the Iterator pattern when your collection has a complex data structure under the hood, but you want to hide its complexity 	 from clients (either for convenience or security reasons).
	
4) Mediator:
	- Mediator is a behavioral design pattern that lets you reduce chaotic dependencies between objects. 
	- The pattern restricts direct communications between the objects and forces them to collaborate only via a mediator object.
	- Use the Mediator pattern when it’s hard to change some of the classes because they are tightly coupled to a bunch of other 		classes.
	
5) Memento:
	- Memento is a behavioral design pattern that lets you save and restore the previous state of an object without revealing the 		details of its implementation.
	- Use the Memento pattern when you want to produce snapshots of the object’s state to be able to restore a previous state of the 	 object.
	
6) Observer:
	- Observer is a behavioral design pattern that lets you define a subscription mechanism to notify multiple objects about any 		events that happen to the object they’re observing.
	
7) State:
	- State is a behavioral design pattern that lets an object alter its behavior when its internal state changes. It appears as if 	the object changed its class.
	- Use the State pattern when you have an object that behaves differently depending on its current state, the number of states is 	 enormous, and the state-specific code changes frequently.
	e.g state machine diagram
	
8) Strategy:
	- Strategy is a behavioral design pattern that lets you define a family of algorithms, put each of them into a separate class, 
	and make their objects interchangeable.
	- Use the Strategy pattern when you want to use different variants of an algorithm within an object and be able to switch from 		one algorithm to another during runtime.
	
9) Template:
	- Template Method is a behavioral design pattern that defines the skeleton of an algorithm in the superclass but lets subclasses 	 override specific steps of the algorithm without changing its structure.
	- Use the Template Method pattern when you want to let clients extend only particular steps of an algorithm, but not the whole 		algorithm or its structure.
	- e.g. files in different formats
	
10) Visitor:
	- Visitor is a behavioral design pattern that lets you separate algorithms from the objects on which they operate.
	- Use the Visitor when you need to perform an operation on all elements of a complex object structure (for example, an object tree).
	

References: https://refactoring.guru/design-patterns/


11) MVC Pattern: It stands for Model-View-Controller Pattern. This pattern is used to separate application's concerns.

    Model - Model represents an object or JAVA POJO carrying data. It can also have logic to update controller if its data changes.

    View - View represents the visualization of the data that model contains.

    Controller - Controller acts on both model and view. It controls the data flow into model object and updates the view whenever data changes. It keeps view and model separate.
